+*In[1]:*+
[source, ipython3]
----
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
----


+*In[2]:*+
[source, ipython3]
----
diabetes_dataset = pd.read_csv('diabetes_dataset.csv')
----


+*In[3]:*+
[source, ipython3]
----
diabetes_dataset.shape
----


+*Out[3]:*+
----(768, 9)----


+*In[4]:*+
[source, ipython3]
----
diabetes_dataset.head()
----


+*Out[4]:*+
----
[cols=",,,,,,,,,",options="header",]
|===
| |Pregnancies |Glucose |BloodPressure |SkinThickness |Insulin |BMI
|DiabetesPedigreeFunction |Age |Outcome
|0 |6 |148 |72 |35 |0 |33.6 |0.627 |50 |1

|1 |1 |85 |66 |29 |0 |26.6 |0.351 |31 |0

|2 |8 |183 |64 |0 |0 |23.3 |0.672 |32 |1

|3 |1 |89 |66 |23 |94 |28.1 |0.167 |21 |0

|4 |0 |137 |40 |35 |168 |43.1 |2.288 |33 |1
|===
----


+*In[5]:*+
[source, ipython3]
----
diabetes_dataset.tail()
----


+*Out[5]:*+
----
[cols=",,,,,,,,,",options="header",]
|===
| |Pregnancies |Glucose |BloodPressure |SkinThickness |Insulin |BMI
|DiabetesPedigreeFunction |Age |Outcome
|763 |10 |101 |76 |48 |180 |32.9 |0.171 |63 |0

|764 |2 |122 |70 |27 |0 |36.8 |0.340 |27 |0

|765 |5 |121 |72 |23 |112 |26.2 |0.245 |30 |0

|766 |1 |126 |60 |0 |0 |30.1 |0.349 |47 |1

|767 |1 |93 |70 |31 |0 |30.4 |0.315 |23 |0
|===
----


+*In[6]:*+
[source, ipython3]
----
diabetes_dataset.info()
----


+*Out[6]:*+
----
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 768 entries, 0 to 767
Data columns (total 9 columns):
 #   Column                    Non-Null Count  Dtype  
---  ------                    --------------  -----  
 0   Pregnancies               768 non-null    int64  
 1   Glucose                   768 non-null    int64  
 2   BloodPressure             768 non-null    int64  
 3   SkinThickness             768 non-null    int64  
 4   Insulin                   768 non-null    int64  
 5   BMI                       768 non-null    float64
 6   DiabetesPedigreeFunction  768 non-null    float64
 7   Age                       768 non-null    int64  
 8   Outcome                   768 non-null    int64  
dtypes: float64(2), int64(7)
memory usage: 54.1 KB
----


+*In[7]:*+
[source, ipython3]
----
diabetes_dataset.describe()
----


+*Out[7]:*+
----
[cols=",,,,,,,,,",options="header",]
|===
| |Pregnancies |Glucose |BloodPressure |SkinThickness |Insulin |BMI
|DiabetesPedigreeFunction |Age |Outcome
|count |768.000000 |768.000000 |768.000000 |768.000000 |768.000000
|768.000000 |768.000000 |768.000000 |768.000000

|mean |3.845052 |120.894531 |69.105469 |20.536458 |79.799479 |31.992578
|0.471876 |33.240885 |0.348958

|std |3.369578 |31.972618 |19.355807 |15.952218 |115.244002 |7.884160
|0.331329 |11.760232 |0.476951

|min |0.000000 |0.000000 |0.000000 |0.000000 |0.000000 |0.000000
|0.078000 |21.000000 |0.000000

|25% |1.000000 |99.000000 |62.000000 |0.000000 |0.000000 |27.300000
|0.243750 |24.000000 |0.000000

|50% |3.000000 |117.000000 |72.000000 |23.000000 |30.500000 |32.000000
|0.372500 |29.000000 |0.000000

|75% |6.000000 |140.250000 |80.000000 |32.000000 |127.250000 |36.600000
|0.626250 |41.000000 |1.000000

|max |17.000000 |199.000000 |122.000000 |99.000000 |846.000000
|67.100000 |2.420000 |81.000000 |1.000000
|===
----


+*In[8]:*+
[source, ipython3]
----
diabetes_dataset['Outcome'].value_counts()
----


+*Out[8]:*+
----0    500
1    268
Name: Outcome, dtype: int64----


+*In[9]:*+
[source, ipython3]
----
sns.countplot(diabetes_dataset['Outcome'])
plt.xlabel("Outcome")
plt.ylabel("Count of Outcome")
plt.title("Outcome Variable count plot")
plt.show()
----


+*Out[9]:*+
----
C:\Users\adeeb ur rehman\anaconda3\lib\site-packages\seaborn\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
  warnings.warn(

![png](output_8_1.png)
----


+*In[10]:*+
[source, ipython3]
----
X=diabetes_dataset.iloc[:,:-1]
Y=diabetes_dataset.iloc[:,-1]
----


+*In[11]:*+
[source, ipython3]
----
X.shape
----


+*Out[11]:*+
----(768, 8)----


+*In[12]:*+
[source, ipython3]
----
Y.shape
----


+*Out[12]:*+
----(768,)----


+*In[13]:*+
[source, ipython3]
----
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, random_state=99)
----


+*In[14]:*+
[source, ipython3]
----
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(criterion="gini",
                            max_depth=8,
                            min_samples_split=10,
                            random_state=5)
----


+*In[15]:*+
[source, ipython3]
----
clf.fit(X_train,Y_train)
----


+*Out[15]:*+
----RandomForestClassifier(max_depth=8, min_samples_split=10, random_state=5)----


+*In[16]:*+
[source, ipython3]
----
clf.feature_importances_
----


+*Out[16]:*+
----array([0.06205354, 0.34637072, 0.0646047 , 0.06447698, 0.07426747,
       0.14807149, 0.11176442, 0.12839069])----


+*In[17]:*+
[source, ipython3]
----
diabetes_dataset.columns
----


+*Out[17]:*+
----Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],
      dtype='object')----


+*In[18]:*+
[source, ipython3]
----
Y_pred = clf.predict(X_test)
----


+*In[19]:*+
[source, ipython3]
----
Y_pred
----


+*Out[19]:*+
----array([0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0,
       0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
       0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1,
       0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1,
       0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,
       0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
       0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], dtype=int64)----


+*In[20]:*+
[source, ipython3]
----
from sklearn.metrics import confusion_matrix
confusion_matrix(Y_test,Y_pred)
----


+*Out[20]:*+
----array([[111,  21],
       [ 21,  39]], dtype=int64)----


+*In[21]:*+
[source, ipython3]
----
from sklearn.metrics import accuracy_score
accuracy_score(Y_test,Y_pred)
----


+*Out[21]:*+
----0.78125----


+*In[22]:*+
[source, ipython3]
----
features= diabetes_dataset.columns
importances=clf.feature_importances_
indices=np.argsort(importances)
plt.title('Feature Importances')
plt.barh(range (len (indices)), importances [indices], color='b', align='center')
plt.yticks (range (len(indices)), [features[i] for i in indices])
plt.xlabel('Relative Importance')
plt.show()
----


+*Out[22]:*+
----
![png](output_21_0.png)
----


+*In[ ]:*+
[source, ipython3]
----

----
